#suppose we wanna find subset with target sum

######01
#recursion approach
//     public boolean util(int[] arr,int sum,int n){
        
//         if(sum==0){
//             return true;
//         }
//         if(n==0){
//             return false;
//         }
        
//         if(arr[n-1]<=sum){
//             return util(arr,sum-arr[n-1],n-1) || util(arr,sum,n-1);
//         }
//             return util(arr,sum,n-1);
//     }


#top-down approach

   boolean t[][] = new boolean[n+1][sum+1];
        for(int i=0;i<sum+1;i++){
            t[0][i]=false; 
        }
        for(int i=0;i<n+1;i++){
            t[i][0]=true; 
        }
        
        for(int i=1;i<n+1;i++){
            for(int j=1;j<sum+1;j++){
                if(nums[i-1]<=j){
                    t[i][j] = t[i-1][j] || t[i-1][j-nums[i-1]];
                }else{
                    t[i][j] = t[i-1][j];
                }
            }
        }
        return t[n][sum];

         
     }
     
### unbounded ka topdown aproach

  boolean t[][] = new boolean[n+1][sum+1];
        for(int i=0;i<sum+1;i++){
            t[0][i]=false; 
        }
        for(int i=0;i<n+1;i++){
            t[i][0]=true; 
        }
        
        for(int i=1;i<n+1;i++){
            for(int j=1;j<sum+1;j++){
                if(nums[i-1]<=j){
                    t[i][j] = t[i-1][j] || t[i][j-nums[i-1]];   // variation 
                }else{
                    t[i][j] = t[i-1][j];
                }
            }
        }
        return t[n][sum];

         
     }
     


